## Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
## SPDX-License-Identifier: Apache-2.0

# This is a reusable workflow for running the E2E test for Application Signals.
# It is meant to be called from another workflow.
# Read more about reusable workflows: https://docs.github.com/en/actions/using-workflows/reusing-workflows#overview
name: E2E Testing
on:
  workflow_call:

permissions:
  id-token: write
  contents: read

jobs:
  upload-main-build:
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::637423224110:role/${{ secrets.STAGING_ARTIFACTS_ACCESS_ROLE_NAME }}
          aws-region: us-east-1

      - uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.staging-instrumentation-name }}

      - name: Upload main-build instrumentation to S3
        run: aws s3 cp ${{ inputs.staging-instrumentation-name }} s3://adot-autoinstrumentation-node-staging/${{ inputs.staging-instrumentation-name }}

  ec2-default:
    needs: [ upload-main-build ]
    uses: aws-observability/aws-application-signals-test-framework/.github/workflows/node-ec2-default-test.yml@main
    secrets: inherit
    with:
      aws-region: us-east-1
      staging-instrumentation-name: ${{ inputs.staging-instrumentation-name }}
      caller-workflow-name: 'main-build'

  ec2-asg:
    needs: [ upload-main-build ]
    uses: aws-observability/aws-application-signals-test-framework/.github/workflows/node-ec2-asg-test.yml@main
    secrets: inherit
    with:
      aws-region: us-east-1
      staging-instrumentation-name: ${{ inputs.staging-instrumentation-name }}
      caller-workflow-name: 'main-build'
      
  ec2-different-node-version:
    strategy:
      fail-fast: false
      matrix:
        node-version: [ '14', '16', '18', '20', '22' ]
    needs: [ upload-main-build ]
    uses: aws-observability/aws-application-signals-test-framework/.github/workflows/node-ec2-default-test.yml@main
    secrets: inherit
    with:
      aws-region: 'us-east-1'
      staging-instrumentation-name: ${{ inputs.staging-instrumentation-name }}
      node-version: ${{ matrix.node-version }}
      cpu-architecture: 'x86_64'
      caller-workflow-name: 'main-build'
      
  ec2-arm64-cpu-architecture:
    needs: [ upload-main-build ]
    uses: aws-observability/aws-application-signals-test-framework/.github/workflows/node-ec2-default-test.yml@main
    secrets: inherit
    with:
      aws-region: 'us-east-1'
      staging-instrumentation-name: ${{ inputs.staging-instrumentation-name }}
      cpu-architecture: 'arm64'
      caller-workflow-name: 'main-build'
      
  eks:
    uses: aws-observability/aws-application-signals-test-framework/.github/workflows/node-eks-test.yml@main
    secrets: inherit
    with:
      aws-region: us-east-1
      test-cluster-name: 'e2e-node-adot-test'
      adot-image-name: ${{ inputs.adot-image-name }}
      caller-workflow-name: 'main-build'

  ecs:
    uses: aws-observability/aws-application-signals-test-framework/.github/workflows/node-ecs-test.yml@main
    secrets: inherit
    with:
      aws-region: us-east-1
      adot-image-name: ${{ inputs.adot-image-name }}
      caller-workflow-name: 'main-build'

  k8s:
    uses: aws-observability/aws-application-signals-test-framework/.github/workflows/node-k8s-test.yml@main
    secrets: inherit
    with:
      aws-region: us-east-1
      adot-image-name: ${{ inputs.adot-image-name }}
      caller-workflow-name: 'main-build'

  lambda:
    uses: aws-observability/aws-application-signals-test-framework/.github/workflows/node-lambda-test.yml@main
    secrets: inherit
    with:
      aws-region: us-east-1
      caller-workflow-name: 'main-build'

  
  # adot-sigv4:
  #   needs: [ upload-main-build ]
  #   uses: aws-observability/aws-application-signals-test-framework/.github/workflows/node-ec2-adot-sigv4-test.yml@main
  #   secrets: inherit
  #   with:
  #     node-version: 22
  #     staging-instrumentation-name: ${{ inputs.staging-instrumentation-name }}
  #     caller-workflow-name: 'main-build'

  validate-all-tests-are-accounted-for:
    runs-on: ubuntu-latest
    steps:
      - name: Install Ruby
        uses: ruby/setup-ruby@v1.221.0
        with:
          ruby-version: "3.4"
      - name: check TESTS_USED
        run: | 
          git clone https://github.com/jj22ee/aws-application-signals-test-framework.git
          cd aws-application-signals-test-framework/.github/workflows/
          echo "TESTS_USED=$(ls | grep -E '^node-' | grep -v '\-perf-' | grep -E 'test\.ya?ml$' -c)" >> $GITHUB_ENV
      - name: check TESTS_AVAILABLE
        run: | 
          git clone https://github.com/jj22ee/aws-otel-js-instrumentation.git
          cd aws-otel-js-instrumentation/.github/workflows/
          echo TESTS_AVAILABLE=$(ruby -ryaml -e 'puts YAML.load_file("application-signals-e2e-test.yml")["jobs"].values.map { |v| v["uses"] }.compact.uniq.count { |u| u.include?("aws-observability/aws-application-signals-test-framework/.github/workflows") }') >> $GITHUB_ENV
      - name: compare TESTS_USED and TESTS_AVAILABLE
        run: |
          echo ${{ env.TESTS_USED }}
          echo ${{ env.TESTS_AVAILABLE }}
          if [[ "${{ env.TESTS_USED }}" != "${{ env.TESTS_AVAILABLE }}" ]]; then
            exit 1
          fi

      